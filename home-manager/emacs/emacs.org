#+title: My Emacs Config

* Foreword
This Config does only work when used with the [[https://github.com/nix-community/emacs-overlay][Emacs Overlay]]. See default.nix for more details.

* Base Config

Here are lie all my basic configurations.

** Emacs Base UI Settings
Here I configure everything UI

#+begin_src emacs-lisp :tangle yes
  (setq inhibit-startup-message t)

  (scroll-bar-mode 1)        ; Enable Scrollbar
  (set-window-scroll-bars (minibuffer-window) nil nil) ;; Disable Scrollbar in Minibuffer
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips

  (menu-bar-mode -1)            ; Disable the menu bar
  (global-visual-line-mode t)

  (use-package adwaita-dark-theme
    ;; :load-path  "~/.emacs.d/adwaita-dark-theme/"
    :ensure t)
  (load-theme 'adwaita-dark t)

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq-default display-line-numbers-width-start t
		display-line-numbers-width 1
		display-line-numbers-grow-only t)

  ;; enable smooth scrolling
  (pixel-scroll-precision-mode 1)
  (setq pixel-scroll-precision-large-scroll-height 5.0)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook
		  vterm-mode-hook
		  treemacs-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (use-package all-the-icons
    :if (display-graphic-p)
    :ensure t)
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Fonts
I use Fira Code with ligatures Setup. Most of the ligature stuff is from the packages Github. 

#+BEGIN_SRC emacs-lisp :tangle yes

  (set-face-attribute 'default nil :font "FiraCode Nerd Font Freeze" :height 136)
  ;; Default Org Block Color is scuffed
  ;; (set-face-attribute 'org-block nil :foreground "light-gray")

  (use-package ligature
    :ensure t
    ;; :load-path "~/.emacs.d/ligatures/"
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia and Fira Code ligatures in programming modes
    (ligature-set-ligatures 't
			    '(;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~
			      ;; =:= =!=
			      ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
			      ;; ;; ;;;
			      (";" (rx (+ ";")))
			      ;; && &&&
			      ("&" (rx (+ "&")))
			      ;; !! !!! !. !: !!. != !== !~
			      ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
			      ;; ?? ??? ?:  ?=  ?.
			      ("?" (rx (or ":" "=" "\." (+ "?"))))
			      ;; %% %%%
			      ("%" (rx (+ "%")))
			      ;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
			      ;; |->>-||-<<-| |- |== ||=||
			      ;; |==>>==<<==<=>==//==/=!==:===>
			      ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
					      "-" "=" ))))
			      ;; \\ \\\ \/
			      ("\\" (rx (or "/" (+ "\\"))))
			      ;; ++ +++ ++++ +>
			      ("+" (rx (or ">" (+ "+"))))
			      ;; :: ::: :::: :> :< := :// ::=
			      (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
			      ;; // /// //// /\ /* /> /===:===!=//===>>==>==/
			      ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!"
					      "="))))
			      ;; .. ... .... .= .- .? ..= ..<
			      ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
			      ;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
			      ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
			      ;; *> */ *)  ** *** ****
			      ("*" (rx (or ">" "/" ")" (+ "*"))))
			      ;; www wwww
			      ("w" (rx (+ "w")))
			      ;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
			      ;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
			      ;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=>
			      ;; << <<< <<<<
			      ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
					      "-"  "/" "|" "="))))
			      ;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>>
			      ;; >> >>> >>>>
			      (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
			      ;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
			      ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
					   (+ "#"))))
			      ;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
			      ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
			      ;; __ ___ ____ _|_ __|____|_
			      ("_" (rx (+ (or "_" "|"))))
			      ;; Fira code: 0xFF 0x12
			      ("0" (rx (and "x" (+ (in "A-F" "a-f" "0-9")))))
			      ;; Fira code:
			      "Fl"  "Tl"  "fi"  "fj"  "fl"  "ft"
			      ;; The few not covered by the regexps.
			      "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))

#+end_src

** Ivy and Counsel

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package ivy
    :ensure t
    :diminish
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)	
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    )

  (ivy-mode)

  (use-package counsel
    :ensure t
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-switch-buffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-r" . counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC

** The Dashboard Package

I think this makes for a nice landing page. It's also very nice to quickly open the last edited files.

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    ;; For Emacs client
    (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))))

#+END_SRC

* Useful Develolpment Tools

** Vterm

The integrated Terminals don't work for me but vterm feels good.

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package vterm
    :ensure t) 

#+END_SRC
