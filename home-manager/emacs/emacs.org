#+title: My Emacs Config

* Foreword
This Config does only work when used with the [[https://github.com/nix-community/emacs-overlay][Emacs Overlay]]. See default.nix for more details.

* Base Config

Here are lie all my basic configurations.

**  Emacs Base UI Settings

Here I configure everything UI 

#+begin_src emacs-lisp :tangle yes
  (setq inhibit-startup-message t)

  (scroll-bar-mode 1)        ; Enable Scrollbar
  (set-window-scroll-bars (minibuffer-window) nil nil) ;; Disable Scrollbar in Minibuffer
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips

  (menu-bar-mode -1)            ; Disable the menu bar
  (global-visual-line-mode t)

  (use-package adwaita-dark-theme
    ;; :load-path  "~/.emacs.d/adwaita-dark-theme/"
    :ensure t)
  (load-theme 'adwaita-dark t)

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq-default display-line-numbers-width-start t
		display-line-numbers-width 1
		display-line-numbers-grow-only t)

  ;; enable smooth scrolling
  (pixel-scroll-precision-mode 1)
  (setq pixel-scroll-precision-large-scroll-height 5.0)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook
		  vterm-mode-hook
		  treemacs-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (use-package all-the-icons
    :if (display-graphic-p)
    :ensure t)
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

**  Fonts
I use Fira Code with ligatures Setup. Most of the ligature stuff is from the packages Github. 

#+BEGIN_SRC emacs-lisp :tangle yes 

  ;; I don't know why I have to set the Font the old way but the new one
  ;; doesn't work with emacs Client. The second line is for Font size only.
  (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font Freeze" ))
  (set-face-attribute 'default t :height 136)
  ;; Default Org Block Color is scuffed
  ;; (set-face-attribute 'org-block nil :foreground "light-gray")

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "FiraCode Nerd Font Freeze" :height 136)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Fira Sans" :height 150 :weight 'regular)

  ;; Set variable and fixed pitch face
  (custom-set-faces '(fixed-pitch ((t (:family "FiraCode Nerd Font Freeze" :height 136))))
                    '(variable-pitch ((t (:family "Fira Sans" :height 150)))))


  (use-package ligature
    :ensure t
    ;; :load-path "~/.emacs.d/ligatures/"
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia and Fira Code ligatures in programming modes
    (ligature-set-ligatures 't
                            '(;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~
                              ;; =:= =!=
                              ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
                              ;; ;; ;;;
                              (";" (rx (+ ";")))
                              ;; && &&&
                              ("&" (rx (+ "&")))
                              ;; !! !!! !. !: !!. != !== !~
                              ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
                              ;; ?? ??? ?:  ?=  ?.
                              ("?" (rx (or ":" "=" "\." (+ "?"))))
                              ;; %% %%%
                              ("%" (rx (+ "%")))
                              ;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
                              ;; |->>-||-<<-| |- |== ||=||
                              ;; |==>>==<<==<=>==//==/=!==:===>
                              ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
                                              "-" "=" ))))
                              ;; \\ \\\ \/
                              ("\\" (rx (or "/" (+ "\\"))))
                              ;; ++ +++ ++++ +>
                              ("+" (rx (or ">" (+ "+"))))
                              ;; :: ::: :::: :> :< := :// ::=
                              (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
                              ;; // /// //// /\ /* /> /===:===!=//===>>==>==/
                              ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!"
                                              "="))))
                              ;; .. ... .... .= .- .? ..= ..<
                              ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
                              ;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
                              ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
                              ;; *> */ *)  ** *** ****
                              ("*" (rx (or ">" "/" ")" (+ "*"))))
                              ;; www wwww
                              ("w" (rx (+ "w")))
                              ;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
                              ;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
                              ;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=>
                              ;; << <<< <<<<
                              ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
                                              "-"  "/" "|" "="))))
                              ;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>>
                              ;; >> >>> >>>>
                              (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
                              ;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
                              ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
                                           (+ "#"))))
                              ;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
                              ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
                              ;; __ ___ ____ _|_ __|____|_
                              ("_" (rx (+ (or "_" "|"))))
                              ;; Fira code: 0xFF 0x12
                              ("0" (rx (and "x" (+ (in "A-F" "a-f" "0-9")))))
                              ;; Fira code:
                              "Fl"  "Tl"  "fi"  "fj"  "fl"  "ft"
                              ;; The few not covered by the regexps.
                              "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))

#+end_src

** Ivy and Counsel

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package ivy
    :ensure t
    :diminish
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)	
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    )

  (ivy-mode)

  (use-package counsel
    :ensure t
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-switch-buffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-r" . counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC

** The Dashboard Package

I think this makes for a nice landing page. It's also very nice to quickly open the last edited files.

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    ;; For Emacs client
    (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))))

#+END_SRC

** Which Key

Tells me which Key Strokes exist. I need this because I forget them all the Time.

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

#+END_SRC


* Useful Develolpment Tools

** Vterm

The integrated Terminals doesn't work for me but vterm feels good.

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package vterm
    :ensure t) 

#+END_SRC

** Git Info in Fringes

Let's you see the Git diff in the Window Border. Just like in VSCode.

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; Fringe Config
  (set-fringe-mode 6)
  (adwaita-dark-theme-arrow-fringe-bmp-enable)

  (use-package diff-hl
    :config
    (eval-after-load 'diff-hl #'adwaita-dark-theme-diff-hl-fringe-bmp-enable)
    (global-diff-hl-mode))

#+END_SRC

** LSP-Mode

*** Company and Yasnippet

Company is needed for LSP-mode auto completion and Yasnippet is just nice to have.

#+begin_src emacs-lisp :tangle yes

  (use-package company
    :config
    (add-hook 'prog-mode-hook #'company-mode))
  (eval-after-load 'flymake #'adwaita-dark-theme-flymake-fringe-bmp-enable)

  (use-package yasnippet-snippets
    :config
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode))

#+end_src

*** Flymake

Flymake is integrated into emacs but the popon plugin is nice.

#+begin_src emacs-lisp :tangle yes

  (use-package flymake-popon
    :init
    (use-package posframe)
    (use-package popon))

#+end_src

*** Basic LSP-Mode

Just the Base config from the Wiki.

#+begin_src emacs-lisp :tangle yes

  (use-package lsp-mode
    :ensure t
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :bind-keymap
    ("C-c l" . lsp-command-map)
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	   (c-mode . lsp)
	   ;; if you want which-key integration
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

#+end_src

*** LSP-Nix

LSP-Mode doesn't seem to work with nixd so we use nil.

#+begin_src emacs-lisp :tangle yes

  (use-package lsp-nix
    :ensure lsp-mode
    :after (lsp-mode)
    :demand t
    :custom
    (lsp-nix-nil-formatter ["nixpkgs-fmt"]))

  ;; nix mode copied straight from the wiki
  (use-package nix-mode
    :hook (nix-mode . lsp-deferred)
    :ensure t
    :mode ("\\.nix\\'" "\\.nix.in\\'"))
  (use-package nix-drv-mode
    :ensure nix-mode
    :mode "\\.drv\\'")
  (use-package nix-shell
    :ensure nix-mode
    :commands (nix-shell-unpack nix-shell-configure nix-shell-build))
  (use-package nix-repl
    :ensure nix-mode
    :commands (nix-repl))

#+end_src

*** CCLS

I can't get clangd to work on NixOS so I am using ccls now. It needs an extra package to work with lsp-mode tho.

#+begin_src emacs-lisp :tangle yes

  (use-package ccls
    :hook ((c-mode c++-mode objc-mode cuda-mode) .
	   (lambda () (require 'ccls) (lsp))))

#+end_src

** Magit

Magit is nice to control git from inside of Emacs.

#+begin_src emacs-lisp :tangle yes

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

** Projectile
LSP-Mode pulls this as a depency but configuring keybinds seems nice.

#+begin_src emacs-lisp :tangle yes

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

* Org Mode Setup

** Org-Modern

Makes Org look a little bit nicer.

#+begin_src emacs-lisp :tangle yes 

  (use-package org-modern
    :ensure t
    :hook
    (org-mode . org-modern-mode)
    (org-agenda-finalize . org-modern-agenda))

  (use-package org-modern-indent
    :config ; add late to hook
    (add-hook 'org-mode-hook #'org-modern-indent-mode 90))
#+end_src

** Center Org Buffers

This centers Org Mode Buffers.

#+begin_src emacs-lisp :tangle yes

  (defun plamper/org-mode-visual-fill ()
    (setq visual-fill-column-width 150
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . plamper/org-mode-visual-fill))

#+end_src

** Org-Font Settings

#+begin_src emacs-lisp :tangle yes

  (defun plamper/org-font-setup ()

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Fira Sans" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
    ;; We set the hidden Characters to Fixed pitch so the indentation is right.
    (set-face-attribute 'org-hide nil :inherit 'fixed-pitch))

#+end_src

** Basic Org Config

#+begin_src emacs-lisp :tangle yes

  (defun plamper/org-mode-setup ()
    (org-indent-mode 1)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . plamper/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-image-actual-width nil)

    (plamper/org-font-setup))

#+end_src

**  Org-Inline-Image-Fix
I found this cool package on [[https://github.com/misohena/org-inline-image-fix][Github]] which fixes some Problems with org-inline-image-mode. Since it's not in any Repository I tried to package it myself. See [[file:packages/org-inline-image-fix.nix][org-inline-image.nix]] for more Details.

#+begin_src emacs-lisp :tangle yes

  (use-package org-inline-image-fix)

#+end_src

** Org Babel Languages

#+begin_src emacs-lisp :tangle yes

  (org-babel-do-load-languages
   'org-babel-load-languages '((C . t)))

#+end_src
